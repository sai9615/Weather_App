{"version":3,"sources":["plot.js","card.js","action.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["Plot","drawPlot","Plotly","newPlot","x","props","xData","toJS","y","yData","type","margin","t","r","l","xaxis","gridcolor","displayModeBar","document","getElementById","on","onPlotClick","nextProps","xDataChanged","this","equals","yDataChanged","id","React","Component","moment","require","Card","imgURL","console","log","newDate","Date","weekday","dt","setTime","className","format","name","size","iconId","flip","rotate","temp","description","getData","url","dispatch","xhr","err","data","body","JSON","parse","list","dailyData","filter","reading","dt_txt","includes","dates","temps","i","length","push","main","setdailyData","setData","setDates","setTemps","setSelectedDate","setSelectedTemp","changeLocation","location","date","App","envt","preventDefault","encodeURIComponent","redux","get","points","number","pointNumber","getIn","loc","target","value","makeCards","val","pushData","img","desc","tempe","dte","event","mute","seekTo","playVideo","currentTemp","onSubmit","placeholder","spellCheck","onChange","videoId","opts","playerVars","autoplay","controls","rel","showinfo","endSeconds","onReady","_onReady","onEnd","_onEnd","connect","state","Boolean","window","hostname","match","initialState","fromJS","selected","store","createStore","action","set","setIn","applyMiddleware","thunkMiddleware","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4a6eecf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Plotly from \"plotly.js\";\r\n\r\nclass Plot extends React.Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    const xDataChanged = !this.props.xData.equals(nextProps.xData);\r\n    const yDataChanged = !this.props.yData.equals(nextProps.yData);\r\n    return xDataChanged || yDataChanged;\r\n  }\r\n\r\n  drawPlot = () => {\r\n    Plotly.newPlot(\r\n      \"plot\",\r\n      [\r\n        {\r\n          x: this.props.xData.toJS(),\r\n          y: this.props.yData.toJS(),\r\n          type: this.props.type\r\n        }\r\n      ],\r\n      {\r\n        margin: {\r\n          t: 50,\r\n          r: 0,\r\n          l: 30\r\n        },\r\n        xaxis: {\r\n          gridcolor: \"transparent\"\r\n        }\r\n      },\r\n      {\r\n        displayModeBar: false\r\n      }\r\n    );\r\n    document.getElementById(\"plot\").on(\"plotly_click\", this.props.onPlotClick);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.drawPlot();\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"plot\"></div>;\r\n  }\r\n}\r\n\r\nexport default Plot;\r\n","import React from 'react';\r\nimport './card.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport WeatherIcon from 'react-icons-weather';\r\nimport './vivify.min.css'\r\n\r\n\r\n\r\nvar moment = require('moment');\r\n\r\n\r\nclass Card extends React.Component {\r\nrender() {\r\n\r\n    var imgURL = this.props.imgURL\r\n    console.log(this.props.imgURL)\r\n    let newDate = new Date();\r\n    const weekday = this.props.dt * 1000\r\n    newDate.setTime(weekday)\r\n\r\n    return (\r\n        <div className=\"col-auto special-card mb-3 vivify popInLeft\"> \r\n          <div className=\"card bg-transparent border-dark\">\r\n            <h3 className=\"card-title\"> {moment(newDate).format('dddd')}</h3>\r\n            <p className=\" days\">{moment(newDate).format('MMMM Do, h:mm a')}</p>\r\n            <WeatherIcon name=\"owm\" size={18} iconId={imgURL} flip=\"horizontal\" rotate=\"90\" size={24} />\r\n            <h2>{this.props.temp} Â°C</h2>\r\n            <div className=\"card-body\">\r\n              <p className=\"card-text\">{this.props.description}</p>\r\n            </div>\r\n          </div>\r\n     </div> \r\n    )\r\n  }\r\n}\r\n  export default Card","import xhr from \"xhr\";\r\n\r\nexport function getData(url) {\r\n  return function thunk(dispatch) {\r\n    xhr(\r\n      {\r\n        url: url\r\n      },\r\n      function(err, data) {\r\n        var body = JSON.parse(data.body);\r\n        var list = body.list;\r\n        var dailyData = list.filter(reading =>\r\n          reading.dt_txt.includes(\"18:00:00\")\r\n        );\r\n        console.log(dailyData);\r\n        var dates = [];\r\n        var temps = [];\r\n        for (var i = 0; i < list.length; i++) {\r\n          dates.push(list[i].dt_txt);\r\n          temps.push(list[i].main.temp);\r\n        }\r\n        dispatch(setdailyData(dailyData));\r\n        dispatch(setData(body));\r\n        dispatch(setDates(dates));\r\n        dispatch(setTemps(temps));\r\n        dispatch(setSelectedDate(\"\"));\r\n        dispatch(setSelectedTemp(null));\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport function changeLocation(location) {\r\n  return {\r\n    type: \"CHANGE_LOCATION\",\r\n    location: location\r\n  };\r\n}\r\n\r\nexport function setdailyData(dailyData) {\r\n  return {\r\n    type: \"DAILY_DATA\",\r\n    dailyData: dailyData\r\n  };\r\n}\r\n\r\nexport function setSelectedTemp(temp) {\r\n  return {\r\n    type: \"CHANGE_SELECTED_TEMPERATURE\",\r\n    temp: temp\r\n  };\r\n}\r\n\r\nexport function setSelectedDate(date) {\r\n  return {\r\n    type: \"CHANGE_SELECTED_DATE\",\r\n    date: date\r\n  };\r\n}\r\n\r\nexport function setData(data) {\r\n  return {\r\n    type: \"SET_DATA\",\r\n    data: data\r\n  };\r\n}\r\n\r\nexport function setDates(dates) {\r\n  return {\r\n    type: \"SET_DATES\",\r\n    dates: dates\r\n  };\r\n}\r\nexport function setTemps(temps) {\r\n  return {\r\n    type: \"SET_TEMPS\",\r\n    temps: temps\r\n  };\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Plot from './plot.js';\r\nimport Card from './card';\r\nimport { connect } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  changeLocation,\r\n  setSelectedDate,\r\n  setSelectedTemp,\r\n  getData\r\n} from './action'\r\nimport YouTube from 'react-youtube';\r\nimport './vivify.min.css'\r\n\r\n\r\nconst ky = \"5080e48cc15e96756601b67c809b1a9e\"\r\n\r\nclass App extends React.Component {\r\n\r\n  getData = (envt) => {\r\n    envt.preventDefault();\r\n    let location = encodeURIComponent(this.props.redux.get('location'));\r\n    let urlPrefix = 'http://api.openweathermap.org/data/2.5/forecast?q=';\r\n    let urlSuffix = '&APPID=' + ky + '&units=metric';\r\n    let url = urlPrefix + location + urlSuffix;\r\n    this.props.dispatch(getData(url));\r\n  }\r\n\r\n  onPlotClick = (data) => {\r\n    if (data.points) {\r\n      var number = data.points[0].pointNumber;\r\n      this.props.dispatch(setSelectedDate(this.props.redux.getIn(['dates', number])));\r\n      this.props.dispatch(setSelectedTemp(this.props.redux.getIn(['temps', number])));\r\n    }\r\n  }\r\n\r\n  changeLocation = (loc) => {\r\n    this.props.dispatch(changeLocation(loc.target.value));\r\n  };\r\n\r\n  makeCards = () => {\r\n    const val = []\r\n    for (var i = 0; i < 5; i++) {\r\n      const description = this.props.redux.getIn(['dailyData', i, 'weather', '0', 'description'])\r\n      const imgURL = this.props.redux.getIn(['dailyData', i, 'weather', '0', 'id'])\r\n      const temp = this.props.redux.getIn(['dailyData', i, 'main', 'temp'])\r\n      const dt = this.props.redux.getIn(['dailyData', i, 'dt'])\r\n      val.push(this.pushData(imgURL, description, temp, dt))\r\n    }\r\n    return val\r\n  }\r\n\r\n  pushData = (img, desc, tempe, dte) => {\r\n    return <Card imgURL={img} description={desc} temp={tempe} dt={dte} />\r\n  }\r\n\r\n  _onReady(event) {\r\n    event.target.mute();\r\n    event.target.seekTo(80);\r\n  }\r\n\r\n  _onEnd(event) {\r\n    event.target.playVideo();\r\n    event.target.seekTo(80);\r\n  }\r\n\r\n  render() {\r\n\r\n    let currentTemp = 'Specify a location';\r\n    const videoOptions = {\r\n      playerVars: { // https://developers.google.com/youtube/player_parameters\r\n        autoplay: 1,\r\n        controls: 0,\r\n        rel: 0,\r\n        showinfo: 0\r\n      }\r\n    };\r\n\r\n    if (this.props.redux.getIn(['data', 'list'])) {\r\n      currentTemp = this.props.redux.getIn(['data', 'list', '0', 'main', 'temp']);\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>Know the Weather  ð¦</h1>\r\n        <div className=\"search-box\">\r\n          <form onSubmit={this.getData}>\r\n            <input\r\n              type=\"text\"\r\n              className=\"search-bar\"\r\n              placeholder=\"City, country\"\r\n              spellCheck =\"false\"\r\n              onChange={this.changeLocation}\r\n              value={this.props.redux.get('location')}\r\n            />\r\n          </form>\r\n        </div>\r\n        {(this.props.redux.getIn(['data', 'list'])) ? (\r\n          <div className=\"wrapper\">\r\n            <p className=\"temp-wrapper\">The current temperature is  <span className=\"temp\"> {currentTemp} </span> <span className=\"temp-symbol\">Â°C</span></p>\r\n            <h2>Forecast</h2>\r\n            <div className=\"container\">\r\n              <div className=\"row justify-content-center\">\r\n                {this.makeCards()}\r\n              </div>\r\n            </div>\r\n            <div className=\"container bkg\">\r\n              {this.props.redux.getIn(['selected', 'temp']) ? (\r\n                <p className=\"temp-wrapper vivify popIn\"> The temperature on <span className=\"temp-date\">  {this.props.redux.getIn(['selected', 'date'])}  </span>  will be  <span className=\"temp\"> {this.props.redux.getIn(['selected', 'temp'])} </span> <span className=\"temp-symbol\">Â°C</span>\r\n                </p>) : <p className=\"temp-wrapper\"> Click on the graph to know more !</p>}\r\n              <div className=\"plot\">\r\n                <Plot\r\n                  xData={this.props.redux.get('dates')}\r\n                  yData={this.props.redux.get('temps')}\r\n                  onPlotClick={this.onPlotClick}\r\n                  type=\"scatter\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"video-background\">\r\n          <div className=\"video-foreground\">\r\n            <YouTube\r\n              videoId=\"2-wnaQZs-og\"\r\n              opts={videoOptions}\r\n              className=\"video-iframe\"\r\n              endSeconds=\"20\"\r\n              onReady={this._onReady}\r\n              onEnd={this._onEnd}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"footer\"> Designed by Sai Milind</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    redux: state\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { fromJS } from \"immutable\";\r\nvar initialState = fromJS({\r\n  location: \"\",\r\n  data: {},\r\n  dates: [],\r\n  temps: [],\r\n  dailyData: {},\r\n  selected: {\r\n    date: \"\",\r\n    temp: null\r\n  }\r\n});\r\n\r\nexport default function Reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"CHANGE_LOCATION\":\r\n      return state.set(\"location\", action.location);\r\n\r\n    case \"SET_DATA\":\r\n      return state.set(\"data\", fromJS(action.data));\r\n\r\n    case \"DAILY_DATA\":\r\n      return state.set(\"dailyData\", fromJS(action.dailyData));\r\n\r\n    case \"SET_DATES\":\r\n      return state.set(\"dates\", fromJS(action.dates));\r\n\r\n    case \"SET_TEMPS\":\r\n      return state.set(\"temps\", fromJS(action.temps));\r\n\r\n    case \"CHANGE_SELECTED_TEMPERATURE\":\r\n      return state.setIn([\"selected\", \"temp\"], action.temp);\r\n\r\n    case \"CHANGE_SELECTED_DATE\":\r\n      return state.setIn([\"selected\", \"date\"], action.date);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducer';\nimport thunkMiddleware from 'redux-thunk';\n\nlet store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n<Provider store={store}>\n<App /> \n</Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}